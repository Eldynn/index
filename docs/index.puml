@startuml
class Handler {
    +save: {}
    +callback: (save: {}, result: {}) => void
    +fire(result: {}): void
}

interface HaveEvent {
    +events: string[]
    +on(event: string, callback: (save: {}, result: {}): HaveEvent
    +emit(event: string, data?: {}): HaveEvent
}
class Profile {
}
class Identity {
    +id: string
}
class User implements HaveMember {
    +profile: Profile
}
class Member implements HaveEvent {
    +user: User
    +group: Group
    +profile: Profile
    +destroy(): void
    +{static} events: string[]
    +{static} build(user: User, group: Group, profile?: Profile): Member
}
interface HaveMember {
    +events: {}
    +size: number
    +add(member: Member): void
    +delete(member: Member): void
    +destroy(): void
    +has(member: Member): boolean
    +get(id: string): Member
}
class Group implements HaveMember {
    +owner: User
    +profile: Profile
}
class Index {
    +users: Map<string, User>
    +groups: Map<string, Group>
    -items: Map<string, Identity>
    +add(identity: Identity): Index
    +delete(identity: Identity): Index
    +get(id: string): Identity
}

User *-- "1" Profile
User *-- "1" Identity
Group *-- "1" Profile
Group *-- "1" Identity
HaveMember *-- "many" Member
HaveMember ..|> HaveEvent
Member *-- "1" Profile
Member o-- Group
Member o-- User
Index *-- "many" User
Index *-- "many" Group
HaveEvent *-- "many" Handler
@enduml
